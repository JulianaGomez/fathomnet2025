{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.12","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":88612,"databundleVersionId":11305476,"sourceType":"competition"}],"dockerImageVersionId":30918,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"markdown","source":"# Questions","metadata":{}},{"cell_type":"markdown","source":"1. How do we tackle differently-sized images?\n* If we clip them down, we lose the bounding boxes and target taxon.\n* If we standardize them by padding them, would we inadvertently train the model on the padding instead of the image?","metadata":{}},{"cell_type":"markdown","source":"# Libraries","metadata":{}},{"cell_type":"code","source":"import numpy as np \nimport pandas as pd \nimport os\nimport json\nimport re\n\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","trusted":true,"execution":{"iopub.status.busy":"2025-03-19T21:24:33.074399Z","iopub.execute_input":"2025-03-19T21:24:33.074857Z","iopub.status.idle":"2025-03-19T21:24:33.083499Z","shell.execute_reply.started":"2025-03-19T21:24:33.074822Z","shell.execute_reply":"2025-03-19T21:24:33.082398Z"}},"outputs":[{"name":"stdout","text":"/kaggle/input/fathomnet-2025/dataset_test.json\n/kaggle/input/fathomnet-2025/requirements.txt\n/kaggle/input/fathomnet-2025/download.py\n/kaggle/input/fathomnet-2025/dataset_train.json\n","output_type":"stream"}],"execution_count":67},{"cell_type":"markdown","source":"# Import model","metadata":{}},{"cell_type":"code","source":"#taken from this starter notebook: https://www.kaggle.com/code/picekl/fungiclef25-starter-notebook\n!pip install -q git+https://github.com/mlfoundations/open_clip.git\n","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"import open_clip\n\nmodel, preprocess_train, preprocess_val = open_clip.create_model_and_transforms('hf-hub:imageomics/bioclip')\ntokenizer = open_clip.get_tokenizer('hf-hub:imageomics/bioclip')","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-19T19:48:42.380266Z","iopub.execute_input":"2025-03-19T19:48:42.380653Z","iopub.status.idle":"2025-03-19T19:49:04.092610Z","shell.execute_reply.started":"2025-03-19T19:48:42.380621Z","shell.execute_reply":"2025-03-19T19:49:04.091659Z"}},"outputs":[{"output_type":"display_data","data":{"text/plain":"open_clip_pytorch_model.bin:   0%|          | 0.00/599M [00:00<?, ?B/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"92617ab21d854c8c9d5b5bec72797a2c"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"open_clip_config.json:   0%|          | 0.00/469 [00:00<?, ?B/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"82e0e9a4febf483083e9ee4743f054d8"}},"metadata":{}}],"execution_count":3},{"cell_type":"code","source":"model","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"tokenizer","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"# Explore train data","metadata":{}},{"cell_type":"markdown","source":"Load and inspect the JSON structure of the train set: \n\n1. Check whether it's a list or a dictionary\n2. If it's a list, check the number of items and the first item\n3. If it's a dictionary, check the keys and the values for the first key","metadata":{}},{"cell_type":"code","source":"with open('/kaggle/input/fathomnet-2025/dataset_train.json', 'r') as f:\n    train_data = json.load(f)\n\nprint(type(train_data))  \nif isinstance(train_data, list):\n    print(len(train_data))  \n    print(train_data[0])  \nelif isinstance(train_data, dict):\n    print(train_data.keys())  \n    print(train_data[list(train_data.keys())[0]])","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-19T19:53:21.279108Z","iopub.execute_input":"2025-03-19T19:53:21.279474Z","iopub.status.idle":"2025-03-19T19:53:21.413584Z","shell.execute_reply.started":"2025-03-19T19:53:21.279444Z","shell.execute_reply":"2025-03-19T19:53:21.412319Z"}},"outputs":[{"name":"stdout","text":"<class 'dict'>\ndict_keys(['info', 'images', 'licenses', 'annotations', 'categories'])\n{'year': 2025, 'version': '0', 'description': 'Generated by FathomNet', 'contributor': 'FathomNet', 'url': 'https://database.fathomnet.org', 'date_created': '2025/01/08'}\n","output_type":"stream"}],"execution_count":10},{"cell_type":"markdown","source":"Since it's a dictionary, create pandas dataframes for each of the keys and inspect them. ","metadata":{}},{"cell_type":"code","source":"def load_data(key, data):\n    return pd.DataFrame(data[key])\n\n# create a dataframe with keys whose values are lists\ndataframes = {key: load_data(key, train_data) for key in train_data.keys() if isinstance(train_data[key], list)}\nprint(dataframes.keys())\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-19T20:15:44.704807Z","iopub.execute_input":"2025-03-19T20:15:44.705167Z","iopub.status.idle":"2025-03-19T20:15:44.773203Z","shell.execute_reply.started":"2025-03-19T20:15:44.705142Z","shell.execute_reply":"2025-03-19T20:15:44.772101Z"},"_kg_hide-input":true},"outputs":[{"name":"stdout","text":"dict_keys(['images', 'licenses', 'annotations', 'categories'])\n","output_type":"stream"}],"execution_count":31},{"cell_type":"markdown","source":"## Information","metadata":{}},{"cell_type":"code","source":"dataframes['info'] = pd.DataFrame([train_data['info']])\ndataframes['info'].head()\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-19T20:20:43.266800Z","iopub.execute_input":"2025-03-19T20:20:43.267305Z","iopub.status.idle":"2025-03-19T20:20:43.280003Z","shell.execute_reply.started":"2025-03-19T20:20:43.267270Z","shell.execute_reply":"2025-03-19T20:20:43.278848Z"}},"outputs":[{"execution_count":32,"output_type":"execute_result","data":{"text/plain":"   year version             description contributor  \\\n0  2025       0  Generated by FathomNet   FathomNet   \n\n                              url date_created  \n0  https://database.fathomnet.org   2025/01/08  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>year</th>\n      <th>version</th>\n      <th>description</th>\n      <th>contributor</th>\n      <th>url</th>\n      <th>date_created</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>2025</td>\n      <td>0</td>\n      <td>Generated by FathomNet</td>\n      <td>FathomNet</td>\n      <td>https://database.fathomnet.org</td>\n      <td>2025/01/08</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}],"execution_count":32},{"cell_type":"markdown","source":"## Images\n\n- Image dimensions differ: standardize? But bounding boxes might be lost, so maybe add padding to smaller ones. \n- some missing data for `date_captured`. Is this relevant to our analysis? Maybe it is, because of the granularity of the photo: check dates.  \n`file_name` follows same logic, so we could use regex to query them.\n- `license`: are all 0, can be discarded. \n- `flickr_url` and `coco_url`are identical, one can be dropped. ","metadata":{}},{"cell_type":"code","source":"num_images = len(dataframes['images'])\nprint(f'There are {num_images} images in the train dataset')\n\ndataframes['images'].head()\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-19T20:30:10.861104Z","iopub.execute_input":"2025-03-19T20:30:10.861461Z","iopub.status.idle":"2025-03-19T20:30:10.874302Z","shell.execute_reply.started":"2025-03-19T20:30:10.861435Z","shell.execute_reply":"2025-03-19T20:30:10.873203Z"}},"outputs":[{"name":"stdout","text":"There are 8981 images in the train dataset\n","output_type":"stream"},{"execution_count":39,"output_type":"execute_result","data":{"text/plain":"   id  width  height                                 file_name  license  \\\n0   1    720     368  67cda248-6d28-4801-9c4e-e4525189ea38.png        0   \n1   2   1920    1080  d9b399f3-8628-4138-a339-f4520be751c5.png        0   \n2   3   1920    1080  3289c3e1-40f2-4512-992f-3fa406b50a86.png        0   \n3   4   1920    1080  801dc37d-1aac-49ac-9067-93ae4bb7c8b6.png        0   \n4   5   1920    1080  0026b62d-3ebc-4a70-b62e-5767a4e5f8b8.png        0   \n\n                                          flickr_url  \\\n0  https://database.fathomnet.org/static/m3/frame...   \n1  https://database.fathomnet.org/static/m3/frame...   \n2  https://database.fathomnet.org/static/m3/frame...   \n3  https://database.fathomnet.org/static/m3/frame...   \n4  https://database.fathomnet.org/static/m3/frame...   \n\n                                            coco_url        date_captured  \n0  https://database.fathomnet.org/static/m3/frame...  2008-12-19 19:46:56  \n1  https://database.fathomnet.org/static/m3/frame...  2019-05-30 16:41:04  \n2  https://database.fathomnet.org/static/m3/frame...  2014-06-05 20:04:19  \n3  https://database.fathomnet.org/static/m3/frame...  2017-12-21 15:37:28  \n4  https://database.fathomnet.org/static/m3/frame...  2021-08-14 16:25:58  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>id</th>\n      <th>width</th>\n      <th>height</th>\n      <th>file_name</th>\n      <th>license</th>\n      <th>flickr_url</th>\n      <th>coco_url</th>\n      <th>date_captured</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1</td>\n      <td>720</td>\n      <td>368</td>\n      <td>67cda248-6d28-4801-9c4e-e4525189ea38.png</td>\n      <td>0</td>\n      <td>https://database.fathomnet.org/static/m3/frame...</td>\n      <td>https://database.fathomnet.org/static/m3/frame...</td>\n      <td>2008-12-19 19:46:56</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2</td>\n      <td>1920</td>\n      <td>1080</td>\n      <td>d9b399f3-8628-4138-a339-f4520be751c5.png</td>\n      <td>0</td>\n      <td>https://database.fathomnet.org/static/m3/frame...</td>\n      <td>https://database.fathomnet.org/static/m3/frame...</td>\n      <td>2019-05-30 16:41:04</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>3</td>\n      <td>1920</td>\n      <td>1080</td>\n      <td>3289c3e1-40f2-4512-992f-3fa406b50a86.png</td>\n      <td>0</td>\n      <td>https://database.fathomnet.org/static/m3/frame...</td>\n      <td>https://database.fathomnet.org/static/m3/frame...</td>\n      <td>2014-06-05 20:04:19</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>4</td>\n      <td>1920</td>\n      <td>1080</td>\n      <td>801dc37d-1aac-49ac-9067-93ae4bb7c8b6.png</td>\n      <td>0</td>\n      <td>https://database.fathomnet.org/static/m3/frame...</td>\n      <td>https://database.fathomnet.org/static/m3/frame...</td>\n      <td>2017-12-21 15:37:28</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>5</td>\n      <td>1920</td>\n      <td>1080</td>\n      <td>0026b62d-3ebc-4a70-b62e-5767a4e5f8b8.png</td>\n      <td>0</td>\n      <td>https://database.fathomnet.org/static/m3/frame...</td>\n      <td>https://database.fathomnet.org/static/m3/frame...</td>\n      <td>2021-08-14 16:25:58</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}],"execution_count":39},{"cell_type":"code","source":"# Data quality check \nif dataframes['images']['license'].unique() == 0:\n    print(\"All licenses are of type 0, 'license' column can be discarded.\")\n\nif dataframes['images']['flickr_url'].equals(dataframes['images']['coco_url'])  :\n    print(\"Columns flickr_url and coco_url are identical, one column can be discarded.\")\n\nfilename_pattern = re.compile(r'^[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}\\.png$')\ndef validate_filenames(filenames):\n    invalid_filenames = []\n    for filename in filenames:\n        if not filename_pattern.match(filename):\n            invalid_filenames.append(filename)\n    return invalid_filenames\n\n# Perform validation\ninvalid_files = validate_filenames(dataframes['images']['file_name'])\n\nif invalid_files:\n    print(\"Invalid filenames detected:\")\n    print(invalid_files)\nelse:\n    print(f\"All filenames follow the same pattern.\")\n\n\nmin_width = dataframes['images']['width'].min()\nmax_width = dataframes['images']['width'].max()\nmin_height = dataframes['images']['height'].min()\nmax_height = dataframes['images']['height'].max()\n\n\nprint(f'Images range from {min_width} to {max_width} in width and {min_height} to {max_height} in height.')","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-19T21:31:01.754971Z","iopub.execute_input":"2025-03-19T21:31:01.755299Z","iopub.status.idle":"2025-03-19T21:31:01.775178Z","shell.execute_reply.started":"2025-03-19T21:31:01.755274Z","shell.execute_reply":"2025-03-19T21:31:01.774244Z"}},"outputs":[{"name":"stdout","text":"All licenses are of type 0, 'license' column can be discarded.\nColumns flickr_url and coco_url are identical, one column can be discarded.\nAll filenames follow the same pattern.\nImages range from 229 to 2048 in width and 237 to 1080 in height\n","output_type":"stream"}],"execution_count":80},{"cell_type":"code","source":"#width and height\ndataframes['images']['width'].hist()\ndataframes['images']['height'].hist()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-19T21:31:13.510296Z","iopub.execute_input":"2025-03-19T21:31:13.510711Z","iopub.status.idle":"2025-03-19T21:31:13.734989Z","shell.execute_reply.started":"2025-03-19T21:31:13.510667Z","shell.execute_reply":"2025-03-19T21:31:13.734043Z"}},"outputs":[{"execution_count":81,"output_type":"execute_result","data":{"text/plain":"<Axes: >"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"<Figure size 640x480 with 1 Axes>","image/png":"\n"},"metadata":{}}],"execution_count":81},{"cell_type":"markdown","source":"## Licenses","metadata":{}},{"cell_type":"code","source":"dataframes['licenses'].head()\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-19T20:09:47.573973Z","iopub.execute_input":"2025-03-19T20:09:47.574305Z","iopub.status.idle":"2025-03-19T20:09:47.584350Z","shell.execute_reply.started":"2025-03-19T20:09:47.574281Z","shell.execute_reply":"2025-03-19T20:09:47.583145Z"}},"outputs":[{"execution_count":27,"output_type":"execute_result","data":{"text/plain":"   id       name                                       url\n0   0  FathomNet  http://fathomnet.org/fathomnet/#/license","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>id</th>\n      <th>name</th>\n      <th>url</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>0</td>\n      <td>FathomNet</td>\n      <td>http://fathomnet.org/fathomnet/#/license</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}],"execution_count":27},{"cell_type":"markdown","source":"## Annotations\n\n- Bounding boxes\n- Some images have more than one bounding box (i.e. more than one taxon). ","metadata":{}},{"cell_type":"code","source":"num_annot = len(dataframes['annotations'])\nprint(f'There are {num_annot} annotations in the train dataset')\ndataframes['annotations'].head()\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-19T20:25:36.265859Z","iopub.execute_input":"2025-03-19T20:25:36.266181Z","iopub.status.idle":"2025-03-19T20:25:36.281486Z","shell.execute_reply.started":"2025-03-19T20:25:36.266158Z","shell.execute_reply":"2025-03-19T20:25:36.280446Z"}},"outputs":[{"name":"stdout","text":"There are 23699 annotations in the train dataset\n","output_type":"stream"},{"execution_count":38,"output_type":"execute_result","data":{"text/plain":"   id  image_id  category_id segmentation      area  \\\n0   1         1           71           []     943.0   \n1   2         2            8           []   71577.0   \n2   3         3           67           []  533148.0   \n3   4         4           37           []  299186.0   \n4   5         4           37           []  520650.0   \n\n                           bbox  iscrowd  \n0    [491.0, 254.0, 23.0, 41.0]        0  \n1  [701.0, 505.0, 241.0, 297.0]        0  \n2  [458.0, 332.0, 924.0, 577.0]        0  \n3  [1155.0, 71.0, 659.0, 454.0]        0  \n4     [66.0, 6.0, 975.0, 534.0]        0  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>id</th>\n      <th>image_id</th>\n      <th>category_id</th>\n      <th>segmentation</th>\n      <th>area</th>\n      <th>bbox</th>\n      <th>iscrowd</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1</td>\n      <td>1</td>\n      <td>71</td>\n      <td>[]</td>\n      <td>943.0</td>\n      <td>[491.0, 254.0, 23.0, 41.0]</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2</td>\n      <td>2</td>\n      <td>8</td>\n      <td>[]</td>\n      <td>71577.0</td>\n      <td>[701.0, 505.0, 241.0, 297.0]</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>3</td>\n      <td>3</td>\n      <td>67</td>\n      <td>[]</td>\n      <td>533148.0</td>\n      <td>[458.0, 332.0, 924.0, 577.0]</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>4</td>\n      <td>4</td>\n      <td>37</td>\n      <td>[]</td>\n      <td>299186.0</td>\n      <td>[1155.0, 71.0, 659.0, 454.0]</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>5</td>\n      <td>4</td>\n      <td>37</td>\n      <td>[]</td>\n      <td>520650.0</td>\n      <td>[66.0, 6.0, 975.0, 534.0]</td>\n      <td>0</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}],"execution_count":38},{"cell_type":"markdown","source":"## Categories\n\n- Competition description: \"The training set contains 79 categories of marine animals of varying taxonomic ranks (e.g., family, genus, species), wherein 300 example instances of each category are provided for training.\"\n\n**Our EDA**\n- Categories are taxa, ranging from class (i.e. *Gastropoda*) to order (i.e. *Zoantharia*) to species (i.e. *Abyssocucumis abyssorum*)\n- Training set has 79 categories - OK","metadata":{}},{"cell_type":"code","source":"num_cat = len(dataframes['categories']['name'])\nprint(f'There are {num_cat} categories (taxa) in the train dataset')\n\ndataframes['categories'].head()\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-19T20:36:08.436511Z","iopub.execute_input":"2025-03-19T20:36:08.436954Z","iopub.status.idle":"2025-03-19T20:36:08.447562Z","shell.execute_reply.started":"2025-03-19T20:36:08.436920Z","shell.execute_reply":"2025-03-19T20:36:08.446349Z"}},"outputs":[{"name":"stdout","text":"There are 79 categories (taxa) in the train dataset\n","output_type":"stream"},{"execution_count":49,"output_type":"execute_result","data":{"text/plain":"   id                     name supercategory\n0   1  Abyssocucumis abyssorum              \n1   2            Acanthascinae              \n2   3            Acanthoptilum              \n3   4               Actinernus              \n4   5               Actiniaria              ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>id</th>\n      <th>name</th>\n      <th>supercategory</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1</td>\n      <td>Abyssocucumis abyssorum</td>\n      <td></td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2</td>\n      <td>Acanthascinae</td>\n      <td></td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>3</td>\n      <td>Acanthoptilum</td>\n      <td></td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>4</td>\n      <td>Actinernus</td>\n      <td></td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>5</td>\n      <td>Actiniaria</td>\n      <td></td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}],"execution_count":49},{"cell_type":"code","source":"dataframes['categories']['name'].unique()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-19T20:35:55.286224Z","iopub.execute_input":"2025-03-19T20:35:55.286573Z","iopub.status.idle":"2025-03-19T20:35:55.302108Z","shell.execute_reply.started":"2025-03-19T20:35:55.286525Z","shell.execute_reply":"2025-03-19T20:35:55.301230Z"}},"outputs":[{"execution_count":48,"output_type":"execute_result","data":{"text/plain":"array(['Abyssocucumis abyssorum', 'Acanthascinae', 'Acanthoptilum',\n       'Actinernus', 'Actiniaria', 'Actinopterygii', 'Amphipoda',\n       'Apostichopus leukothele', 'Asbestopluma',\n       'Asbestopluma monticola', 'Asteroidea', 'Benthocodon pedunculata',\n       'Brisingida', 'Caridea', 'Ceriantharia', 'Chionoecetes tanneri',\n       'Chorilia longipes', 'Corallimorphus pilatus', 'Crinoidea',\n       'Delectopecten', 'Elpidia', 'Farrea', 'Florometra serratissima',\n       'Funiculina', 'Gastropoda', 'Gersemia juliepackardae',\n       'Heterocarpus', 'Heterochone calyx', 'Heteropolypus ritteri',\n       'Hexactinellida', 'Hippasteria', 'Holothuroidea', 'Hormathiidae',\n       'Isidella tentaculum', 'Isididae', 'Isosicyonis', 'Keratoisis',\n       'Liponema brevicorne', 'Lithodidae', 'Mediaster aequalis',\n       'Merluccius productus', 'Metridium farcimen',\n       'Microstomus pacificus', 'Munidopsis', 'Munnopsidae', 'Mycale',\n       'Octopus rubescens', 'Ophiacanthidae', 'Ophiuroidea',\n       'Paelopatides confundens', 'Pandalus amplus',\n       'Pandalus platyceros', 'Pannychia moseleyi', 'Paragorgia',\n       'Paragorgia arborea', 'Paralomis multispina', 'Parastenella',\n       'Peniagone', 'Pennatula phosphorea', 'Porifera',\n       'Psathyrometra fragilis', 'Psolus squamatus',\n       'Ptychogastria polaris', 'Pyrosoma atlanticum',\n       'Rathbunaster californicus', 'Scleractinia', 'Scotoplanes',\n       'Scotoplanes globosa', 'Sebastes', 'Sebastes diploproa',\n       'Sebastolobus', 'Serpulidae', 'Staurocalyptus',\n       'Strongylocentrotus fragilis', 'Terebellidae', 'Tunicata',\n       'Umbellula', 'Vesicomyidae', 'Zoantharia'], dtype=object)"},"metadata":{}}],"execution_count":48},{"cell_type":"code","source":"print(\"There are no values in the supercategory series\")\ndataframes['categories']['supercategory'].unique()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-19T20:48:05.431511Z","iopub.execute_input":"2025-03-19T20:48:05.431990Z","iopub.status.idle":"2025-03-19T20:48:05.439761Z","shell.execute_reply.started":"2025-03-19T20:48:05.431959Z","shell.execute_reply":"2025-03-19T20:48:05.438684Z"}},"outputs":[{"name":"stdout","text":"There are no values in the supercategory series\n","output_type":"stream"},{"execution_count":51,"output_type":"execute_result","data":{"text/plain":"array([''], dtype=object)"},"metadata":{}}],"execution_count":51},{"cell_type":"markdown","source":"# Join\n\n- Join images, annotations and categories, to check the number of images per category\n","metadata":{}},{"cell_type":"code","source":"result = pd.merge(pd.merge(dataframes['images'], dataframes['annotations'], on='id', how='outer'), dataframes['categories'], on='id', how='outer')\nresult.head()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-03-19T21:11:47.523315Z","iopub.execute_input":"2025-03-19T21:11:47.523777Z","iopub.status.idle":"2025-03-19T21:11:47.606521Z","shell.execute_reply.started":"2025-03-19T21:11:47.523740Z","shell.execute_reply":"2025-03-19T21:11:47.605639Z"}},"outputs":[{"execution_count":56,"output_type":"execute_result","data":{"text/plain":"   id   width  height                                 file_name  license  \\\n0   1   720.0   368.0  67cda248-6d28-4801-9c4e-e4525189ea38.png      0.0   \n1   2  1920.0  1080.0  d9b399f3-8628-4138-a339-f4520be751c5.png      0.0   \n2   3  1920.0  1080.0  3289c3e1-40f2-4512-992f-3fa406b50a86.png      0.0   \n3   4  1920.0  1080.0  801dc37d-1aac-49ac-9067-93ae4bb7c8b6.png      0.0   \n4   5  1920.0  1080.0  0026b62d-3ebc-4a70-b62e-5767a4e5f8b8.png      0.0   \n\n                                          flickr_url  \\\n0  https://database.fathomnet.org/static/m3/frame...   \n1  https://database.fathomnet.org/static/m3/frame...   \n2  https://database.fathomnet.org/static/m3/frame...   \n3  https://database.fathomnet.org/static/m3/frame...   \n4  https://database.fathomnet.org/static/m3/frame...   \n\n                                            coco_url        date_captured  \\\n0  https://database.fathomnet.org/static/m3/frame...  2008-12-19 19:46:56   \n1  https://database.fathomnet.org/static/m3/frame...  2019-05-30 16:41:04   \n2  https://database.fathomnet.org/static/m3/frame...  2014-06-05 20:04:19   \n3  https://database.fathomnet.org/static/m3/frame...  2017-12-21 15:37:28   \n4  https://database.fathomnet.org/static/m3/frame...  2021-08-14 16:25:58   \n\n   image_id  category_id segmentation      area                          bbox  \\\n0         1           71           []     943.0    [491.0, 254.0, 23.0, 41.0]   \n1         2            8           []   71577.0  [701.0, 505.0, 241.0, 297.0]   \n2         3           67           []  533148.0  [458.0, 332.0, 924.0, 577.0]   \n3         4           37           []  299186.0  [1155.0, 71.0, 659.0, 454.0]   \n4         4           37           []  520650.0     [66.0, 6.0, 975.0, 534.0]   \n\n   iscrowd                     name supercategory  \n0        0  Abyssocucumis abyssorum                \n1        0            Acanthascinae                \n2        0            Acanthoptilum                \n3        0               Actinernus                \n4        0               Actiniaria                ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>id</th>\n      <th>width</th>\n      <th>height</th>\n      <th>file_name</th>\n      <th>license</th>\n      <th>flickr_url</th>\n      <th>coco_url</th>\n      <th>date_captured</th>\n      <th>image_id</th>\n      <th>category_id</th>\n      <th>segmentation</th>\n      <th>area</th>\n      <th>bbox</th>\n      <th>iscrowd</th>\n      <th>name</th>\n      <th>supercategory</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1</td>\n      <td>720.0</td>\n      <td>368.0</td>\n      <td>67cda248-6d28-4801-9c4e-e4525189ea38.png</td>\n      <td>0.0</td>\n      <td>https://database.fathomnet.org/static/m3/frame...</td>\n      <td>https://database.fathomnet.org/static/m3/frame...</td>\n      <td>2008-12-19 19:46:56</td>\n      <td>1</td>\n      <td>71</td>\n      <td>[]</td>\n      <td>943.0</td>\n      <td>[491.0, 254.0, 23.0, 41.0]</td>\n      <td>0</td>\n      <td>Abyssocucumis abyssorum</td>\n      <td></td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2</td>\n      <td>1920.0</td>\n      <td>1080.0</td>\n      <td>d9b399f3-8628-4138-a339-f4520be751c5.png</td>\n      <td>0.0</td>\n      <td>https://database.fathomnet.org/static/m3/frame...</td>\n      <td>https://database.fathomnet.org/static/m3/frame...</td>\n      <td>2019-05-30 16:41:04</td>\n      <td>2</td>\n      <td>8</td>\n      <td>[]</td>\n      <td>71577.0</td>\n      <td>[701.0, 505.0, 241.0, 297.0]</td>\n      <td>0</td>\n      <td>Acanthascinae</td>\n      <td></td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>3</td>\n      <td>1920.0</td>\n      <td>1080.0</td>\n      <td>3289c3e1-40f2-4512-992f-3fa406b50a86.png</td>\n      <td>0.0</td>\n      <td>https://database.fathomnet.org/static/m3/frame...</td>\n      <td>https://database.fathomnet.org/static/m3/frame...</td>\n      <td>2014-06-05 20:04:19</td>\n      <td>3</td>\n      <td>67</td>\n      <td>[]</td>\n      <td>533148.0</td>\n      <td>[458.0, 332.0, 924.0, 577.0]</td>\n      <td>0</td>\n      <td>Acanthoptilum</td>\n      <td></td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>4</td>\n      <td>1920.0</td>\n      <td>1080.0</td>\n      <td>801dc37d-1aac-49ac-9067-93ae4bb7c8b6.png</td>\n      <td>0.0</td>\n      <td>https://database.fathomnet.org/static/m3/frame...</td>\n      <td>https://database.fathomnet.org/static/m3/frame...</td>\n      <td>2017-12-21 15:37:28</td>\n      <td>4</td>\n      <td>37</td>\n      <td>[]</td>\n      <td>299186.0</td>\n      <td>[1155.0, 71.0, 659.0, 454.0]</td>\n      <td>0</td>\n      <td>Actinernus</td>\n      <td></td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>5</td>\n      <td>1920.0</td>\n      <td>1080.0</td>\n      <td>0026b62d-3ebc-4a70-b62e-5767a4e5f8b8.png</td>\n      <td>0.0</td>\n      <td>https://database.fathomnet.org/static/m3/frame...</td>\n      <td>https://database.fathomnet.org/static/m3/frame...</td>\n      <td>2021-08-14 16:25:58</td>\n      <td>4</td>\n      <td>37</td>\n      <td>[]</td>\n      <td>520650.0</td>\n      <td>[66.0, 6.0, 975.0, 534.0]</td>\n      <td>0</td>\n      <td>Actiniaria</td>\n      <td></td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}],"execution_count":56}]}